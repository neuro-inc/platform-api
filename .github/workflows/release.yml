name: Release

on:
  workflow_run:
    workflows:
      - CI
    types:
      - completed

permissions:
  contents: write
  packages: write

jobs:
  publish_image:
    name: Publish Image
    runs-on: ubuntu-latest
    concurrency: release_image
    outputs:
      tag: ${{ steps.release.outputs.tag }}
      version: ${{ steps.release.outputs.version }}
      skip: ${{ steps.release.outputs.skip }}
    steps:
    - name: Purge old artifacts
      uses: kolpav/purge-artifacts-action@v1
      with:
        token: ${{ secrets.GH_TOKEN }}
        expire-in: 30mins
    - name: Release image
      id: release
      uses: neuro-inc/release-image-action@v21.9.36
      with:
        image: platformapi
        token: ${{ secrets.GH_TOKEN }}
    - name: Checkout commit
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.workflow_run.head_sha }}
        fetch-depth: 0
    - name: Github Release
      if: ${{ ! steps.release.outputs.skip }}
      run: |
        if [[ -n $PRERELEASE ]]; then
          gh release create "$TAG" --prerelease --notes "docker pull ghcr.io/neuro-inc/platformapi:$VERSION"
        else
          gh release create "$TAG" --notes "docker pull ghcr.io/neuro-inc/platformapi:$VERSION"
        fi
      shell: bash
      env:
        TAG: ${{ steps.release.outputs.tag }}
        VERSION: ${{ steps.release.outputs.version }}
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
        PRERELEASE: ${{ steps.release.outputs.prerelease }}
  publish_chart:
    name: Publish Helm chart
    runs-on: ubuntu-latest
    needs: publish_image
    if: ${{ ! needs.publish_image.outputs.skip }}
    concurrency: release_helm_chart
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.workflow_run.head_sha }}
        fetch-depth: 0
    - name: Configure Git
      run: |
        git config user.name "$GITHUB_ACTOR"
        git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
    - name: Install Helm
      uses: azure/setup-helm@v1
      with:
        version: v3.7.0
    - name: Create platform-api chart
      run: make helm_create_chart
      env:
        IMAGE_REGISTRY: github
        IMAGE_TAG: ${{ needs.publish_image.outputs.version }}
        GITHUB_OWNER: ${{ github.repository_owner }}
        HELM_CHART: platform-api
        HELM_CHART_VERSION: ${{ needs.publish_image.outputs.version }}
        HELM_APP_VERSION: ${{ needs.publish_image.outputs.version }}
    - name: Release platform-api chart
      env:
        HELM_EXPERIMENTAL_OCI: 1
        HELM_REPO: ghcr.io/${{ github.repository_owner }}/helm-charts
        HELM_CHART_VERSION: ${{ needs.publish_image.outputs.version }}
        CR_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo $CR_TOKEN | helm registry login ghcr.io -u x-access-token --password-stdin
        helm package charts/platform-api -u
        helm push platform-api-$HELM_CHART_VERSION.tgz oci://$HELM_REPO
    - name: Create platform-api-poller chart
      run: make helm_create_chart
      env:
        IMAGE_REGISTRY: github
        IMAGE_TAG: ${{ needs.publish_image.outputs.version }}
        GITHUB_OWNER: ${{ github.repository_owner }}
        HELM_CHART: platform-api-poller
        HELM_CHART_VERSION: ${{ needs.publish_image.outputs.version }}
        HELM_APP_VERSION: ${{ needs.publish_image.outputs.version }}
    - name: Release platform-api-poller chart
      env:
        HELM_EXPERIMENTAL_OCI: 1
        HELM_REPO: ghcr.io/${{ github.repository_owner }}/helm-charts
        HELM_CHART_VERSION: ${{ needs.publish_image.outputs.version }}
        CR_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        helm package charts/platform-api-poller -u
        helm push platform-api-poller-$HELM_CHART_VERSION.tgz oci://$HELM_REPO

  # Temporary solution until deployment configurations are moved to a separate repository.
  deploy_mts:
    name: Deploy to MTS
    runs-on: ubuntu-latest
    needs: publish_image
    concurrency: deploy_mts
    if: ${{ ! needs.publish_image.outputs.skip }}
    env:
      GITHUB_OWNER: ${{ github.repository_owner }}
      HELM_ENV: mts
      HELM_CHART: platform-api
      HELM_RELEASE: platform-api
      IMAGE_REGISTRY: github
    steps:
    - name: Checkout commit
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Install Helm
      uses: azure/setup-helm@v1
      with:
        version: v3.7.0
    - name: Configure kube config
      uses: azure/k8s-set-context@v1
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.MTS_KUBE_CONFIG }}
    - name: Deploy to kubernetes
      env:
        IMAGE_TAG: ${{ needs.publish_image.outputs.version }}
      run: make helm_deploy
