name: CI

on:
  push:
    branches: [master]
    tags: [v*.*, v*.*.*, poller/v*.*.*]
  pull_request:
    branches: [master]
  pull_request_target:
    branches: [master]
  schedule:
  - cron: 0 4 * * *

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    if: |
      (github.event_name != 'pull_request_target' && github.actor != 'dependabot[bot]') ||
      (github.event_name == 'pull_request_target' && github.actor == 'dependabot[bot]')
    env:
      CLOUD_PROVIDER: ${{ secrets.CLOUD_PROVIDER_DEV }}
    steps:
    - name: Checkout commit
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: 0
    - name: Install python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8.10
    - name: Cache packages
      uses: actions/cache@v2.1.6
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-py-3.8.10-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('setup.cfg')
          }}
    - name: Install dependencies
      run: make setup
    - name: Lint
      run: |
        echo "::add-matcher::.github/actionlint-matcher.json"
        make lint
      env:
        CI_LINT_RUN: 1
    - name: Run unit tests
      run: make test_unit
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v2.1.0
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: .coverage-unit.xml
        flags: unit
        name: codecov-unit
    - name: Configure AWS credentials
      if: env.CLOUD_PROVIDER == 'aws'
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    - name: Login to AWS ECR
      if: env.CLOUD_PROVIDER == 'aws'
      uses: aws-actions/amazon-ecr-login@v1
    - name: Configure Azure credentials
      if: env.CLOUD_PROVIDER == 'azure'
      uses: azure/login@v1
      with:
        creds: ${{secrets.AZURE_CREDENTIALS}}
    - name: Login to Azure ACR
      if: env.CLOUD_PROVIDER == 'azure'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.AZURE_DEV_ACR_SERVER }}
        username: ${{ secrets.AZURE_DEV_ACR_USERNAME }}
        password: ${{ secrets.AZURE_DEV_ACR_PASSWORD }}
    - name: Install NFS
      run: |
        sudo apt-get -q update
        sudo apt-get -q install -y nfs-common
        sudo modprobe nfs
        sudo modprobe nfsd
    - name: Start minikube
      run: |
        make install_k8s
        make start_k8s
    - name: Pull test images
      run: make docker_pull_test_images
    - name: Run integration tests
      run: make test_integration
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v2.1.0
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: .coverage-integration.xml
        flags: integration
        name: codecov-integration
    - name: Build Docker image
      run: make docker_build
      env:
        TAG: latest
    - name: Upload image artifact
      uses: neuro-inc/upload-image-action@v21.9.2
      with:
        image: platformapi
        token: ${{ secrets.GITHUB_TOKEN }}

  deploy_dev:
    name: Deploy to dev
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    env:
      ARTIFACTORY_DOCKER_REPO: ${{ secrets.ARTIFACTORY_DOCKER_REPO }}
      ARTIFACTORY_HELM_REPO: ${{ secrets.ARTIFACTORY_HELM_REPO }}
      ARTIFACTORY_HELM_VIRTUAL_REPO: ${{ secrets.ARTIFACTORY_HELM_VIRTUAL_REPO }}
      ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
      ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AZURE_ACR_NAME: ${{ secrets.AZURE_DEV_ACR_NAME }}
      AZURE_REGION: ${{ secrets.AZURE_DEV_REGION }}
      AZURE_RG_NAME: ${{ secrets.AZURE_DEV_RG_NAME }}
      CLUSTER_NAME: ${{ secrets.DEV_CLUSTER_NAME }}
      HELM_VERSION: ${{ secrets.HELM3_VERSION }}
      CLOUD_PROVIDER: ${{ secrets.CLOUD_PROVIDER_DEV }}
      IMAGE_REGISTRY: ${{ secrets.CLOUD_PROVIDER_DEV }}
    steps:
    - name: Checkout commit
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Install python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8.10
    - name: Configure AWS credentials
      if: env.CLOUD_PROVIDER == 'aws'
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    - name: Login to AWS ECR
      if: env.CLOUD_PROVIDER == 'aws'
      uses: aws-actions/amazon-ecr-login@v1
    - name: Configure Azure credentials
      if: env.CLOUD_PROVIDER == 'azure'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: Login to Azure ACR
      if: env.CLOUD_PROVIDER == 'azure'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.AZURE_DEV_ACR_SERVER }}
        username: ${{ secrets.AZURE_DEV_ACR_USERNAME }}
        password: ${{ secrets.AZURE_DEV_ACR_PASSWORD }}
    - name: Set tag
      run: echo "TAG=$GITHUB_SHA" >> $GITHUB_ENV
    - name: Push images to registry
      run: make docker_push
    - name: Update kube config
      run: make ${{ env.CLOUD_PROVIDER }}_k8s_login
    - name: Install helm
      run: make helm_install
    - name: Deploy Main service to kubernetes
      run: make helm_deploy
      env:
        HELM_CHART: platformapi
        HELM_ENV: dev-${{ secrets.CLOUD_PROVIDER_DEV }}
    - name: Deploy poller service to kubernetes (default)
      run: make helm_deploy
      env:
        HELM_CHART: platformapi-poller
        HELM_ENV: dev
        CLUSTER_NAME: default
    - name: Deploy poller service to kubernetes (default2)
      run: make helm_deploy
      env:
        HELM_CHART: platformapi-poller
        HELM_ENV: dev
        CLUSTER_NAME: default2
        RELEASE_SUFFIX: -default2

    concurrency: deploy_dev
  release_public:
    name: Release Public REPOs
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/poller')
    env:
      ARTIFACTORY_DOCKER_REPO: ${{ secrets.ARTIFACTORY_ANONYMOUS_DOCKER_REPO }}
      ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
      ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
    steps:
    - name: Checkout commit
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Install python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8.10
    - name: Login to Artifactory docker registry
      uses: docker/login-action@v1
      with:
        registry: ${{ secrets.ARTIFACTORY_ANONYMOUS_DOCKER_REPO }}
        username: ${{ secrets.ARTIFACTORY_USERNAME }}
        password: ${{ secrets.ARTIFACTORY_PASSWORD }}
    - name: Set tag
      run: echo "TAG=${GITHUB_REF#refs/tags/poller/v}" >> $GITHUB_ENV
    - name: Push images to registry
      run: make docker_push

  release_poller:
    name: Release poller
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/poller')
    env:
      ARTIFACTORY_DOCKER_REPO: ${{ secrets.ARTIFACTORY_DOCKER_REPO }}
      ARTIFACTORY_HELM_REPO: ${{ secrets.ARTIFACTORY_HELM_REPO }}
      ARTIFACTORY_HELM_VIRTUAL_REPO: ${{ secrets.ARTIFACTORY_HELM_VIRTUAL_REPO }}
      ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
      ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
      HELM_VERSION: ${{ secrets.HELM3_VERSION }}
    steps:
    - name: Checkout commit
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Install python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8.10
    - name: Login to Artifactory docker registry
      uses: docker/login-action@v1
      with:
        registry: ${{ secrets.ARTIFACTORY_DOCKER_REPO }}
        username: ${{ secrets.ARTIFACTORY_USERNAME }}
        password: ${{ secrets.ARTIFACTORY_PASSWORD }}
    - name: Set tag
      run: echo "TAG=${GITHUB_REF#refs/tags/poller/v}" >> $GITHUB_ENV
    - name: Push images to registry
      run: make docker_push
    - name: Install helm
      run: make helm_install
    - name: Push poller helm chart to Artifactory
      run: make artifactory_helm_push
      env:
        HELM_CHART: platformapi-poller

  release:
    name: Create release packages
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/v')
    env:
      ARTIFACTORY_DOCKER_REPO: ${{ secrets.ARTIFACTORY_DOCKER_REPO }}
      ARTIFACTORY_HELM_REPO: ${{ secrets.ARTIFACTORY_HELM_REPO }}
      ARTIFACTORY_HELM_VIRTUAL_REPO: ${{ secrets.ARTIFACTORY_HELM_VIRTUAL_REPO }}
      ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
      ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
      HELM_VERSION: ${{ secrets.HELM3_VERSION }}
    steps:
    - name: Checkout commit
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Install python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8.10
    - name: Login to Artifactory docker registry
      uses: docker/login-action@v1
      with:
        registry: ${{ secrets.ARTIFACTORY_DOCKER_REPO }}
        username: ${{ secrets.ARTIFACTORY_USERNAME }}
        password: ${{ secrets.ARTIFACTORY_PASSWORD }}
    - name: Set tag
      run: echo "TAG=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
    - name: Push images to registry
      run: make docker_push
    - name: Install helm
      run: make helm_install
    - name: Push helm chart to Artifactory
      run: make artifactory_helm_push

  deploy_staging:
    name: Deploy to staging
    runs-on: ubuntu-latest
    needs: release
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/v')
    env:
      ARTIFACTORY_DOCKER_REPO: ${{ secrets.ARTIFACTORY_DOCKER_REPO }}
      ARTIFACTORY_HELM_REPO: ${{ secrets.ARTIFACTORY_HELM_REPO }}
      ARTIFACTORY_HELM_VIRTUAL_REPO: ${{ secrets.ARTIFACTORY_HELM_VIRTUAL_REPO }}
      ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
      ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AZURE_ACR_NAME: ${{ secrets.AZURE_STAGING_ACR_NAME }}
      AZURE_REGION: ${{ secrets.AZURE_STAGING_REGION }}
      AZURE_RG_NAME: ${{ secrets.AZURE_STAGING_RG_NAME }}
      CLUSTER_NAME: ${{ secrets.STAGING_CLUSTER_NAME }}
      HELM_ENV: staging-${{ secrets.CLOUD_PROVIDER_STAGING }}
      HELM_VERSION: ${{ secrets.HELM3_VERSION }}
      CLOUD_PROVIDER: ${{ secrets.CLOUD_PROVIDER_STAGING }}
    steps:
    - name: Checkout commit
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Install python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8.10
    - name: Configure AWS credentials
      if: env.CLOUD_PROVIDER == 'aws'
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    - name: Configure Azure credentials
      if: env.CLOUD_PROVIDER == 'azure'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: Set tag
      run: echo "TAG=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
    - name: Update kube config
      run: make ${{ env.CLOUD_PROVIDER }}_k8s_login
    - name: Install helm
      run: make helm_install
    - name: Deploy to kubernetes
      run: make artifactory_helm_deploy

  deploy_mts:
    name: Deploy to MTS
    runs-on: ubuntu-latest
    needs: deploy_staging
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/v')
    env:
      ARTIFACTORY_DOCKER_REPO: ${{ secrets.ARTIFACTORY_DOCKER_REPO }}
      ARTIFACTORY_HELM_REPO: ${{ secrets.ARTIFACTORY_HELM_REPO }}
      ARTIFACTORY_HELM_VIRTUAL_REPO: ${{ secrets.ARTIFACTORY_HELM_VIRTUAL_REPO }}
      ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
      ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
      HELM_VERSION: ${{ secrets.HELM3_VERSION }}
      HELM_ENV: mts
    steps:
    - name: Checkout commit
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Configure kube config
      uses: azure/k8s-set-context@v1
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.MTS_KUBE_CONFIG }}
    - name: Set tag
      run: echo "TAG=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
    - name: Install helm
      run: make helm_install
    - name: Deploy to kubernetes
      run: make artifactory_helm_deploy
