name: Continuous Integration

on: push

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    env:
      PIP_EXTRA_INDEX_URL: ${{ format('https://{0}:{1}@{2}/{0}/{3}', secrets.DEVPI_USER, secrets.DEVPI_PASS, secrets.DEVPI_HOST, secrets.DEVPI_INDEX) }}
      ARTIFACTORY_DOCKER_REPO: ${{ secrets.ARTIFACTORY_DOCKER_REPO }}
      ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
      ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
    steps:
      - name: Checkout commit
        uses: actions/checkout@v2
      - name: Install python
        uses: actions/setup-python@v2
        with:
          python-version: "3.7.7"
      - name: Cache packages
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-py-3.7.7-${{ hashFiles('requirements/*.txt') }}-${{ hashFiles('setup.py') }}
      - name: Install dependencies
        run: make setup
      - name: Lint
        run: make lint
      - name: Run unit tests
        run: make test_unit
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: .coverage-unit.xml
          flags: unit
          name: codecov-unit
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v1
      - name: Install containerd
        run: |
          # without containerd, tests TestTopApi won't work
          # see https://github.com/neuromation/platform-api/pull/928/files#diff-1d37e48f9ceff6d8030570cd36286a61R76
          export DEBIAN_FRONTEND=noninteractive
          export RELEASE=$(lsb_release -cs)
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository -y \
            "deb [arch=amd64] https://download.docker.com/linux/ubuntu $RELEASE stable"
          sudo apt-get -q update
          sudo apt-get -q install -y \
            docker-ce=5:18.09.4~3-0~ubuntu-$RELEASE \
            docker-ce-cli=5:18.09.4~3-0~ubuntu-$RELEASE \
            containerd.io=1.2.5-1
      - name: Install NFS
        run: |
          sudo apt-get -q update
          sudo apt-get -q install -y nfs-common
          sudo modprobe nfs
          sudo modprobe nfsd
      - name: Start minikube
        run: |
          make install_k8s
          make start_k8s
      - name: Pull test images
        run: make docker_pull_test_images
      - name: Run integration tests
        run: make test_integration
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: .coverage-integration.xml
          flags: integration
          name: codecov-integration
      - name: Run e2e tests
        run: make test_k8s_e2e
  deploy_dev:
    name: Deploy on dev
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/master'
    env:
      PIP_EXTRA_INDEX_URL: ${{ format('https://{0}:{1}@{2}/{0}/{3}', secrets.DEVPI_USER, secrets.DEVPI_PASS, secrets.DEVPI_HOST, secrets.DEVPI_INDEX) }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_CLUSTER_NAME: ${{ secrets.AWS_DEV_CLUSTER_NAME }}
      HELM_ENV: dev
    steps:
      - name: Checkout commit
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v1
      - name: Push images to ECR
        run: |
          make docker_push
          make docker_push_ssh_auth
      - name: Update kube config
        run: make eks_login
      - name: Install helm
        run: make helm_install
      - name: Deploy to kubernetes
        run: |
          make helm_deploy
          make helm_deploy_ssh_auth
  deploy_staging:
    name: Deploy on staging
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/heads/release/')
    env:
      PIP_EXTRA_INDEX_URL: ${{ format('https://{0}:{1}@{2}/{0}/{3}', secrets.DEVPI_USER, secrets.DEVPI_PASS, secrets.DEVPI_HOST, secrets.DEVPI_INDEX) }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_CLUSTER_NAME: ${{ secrets.AWS_STAGING_CLUSTER_NAME }}
      HELM_ENV: staging
    steps:
      - name: Checkout commit
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v1
      - name: Push images to ECR
        run: make docker_push
      - name: Update kube config
        run: make eks_login
      - name: Install helm
        run: make helm_install
      - name: Deploy to kubernetes
        run: make helm_deploy
