[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.poetry]
name = "platform-api"
version = "0.0.0"
description = "Apolo platform api"
readme = "README.md"
license = "Proprietary"
authors = ["Apolo.us"]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only"
]

[tool.poetry.dependencies]
python = ">=3.11,<4.0"
aiohttp = {version = "^3.12.15", extras = ["speedups"]}
iso8601 = ">=2.1.0"
trafaret = "2.1.1"
neuro-auth-client = "25.8.2"
cryptography = "45.0.7"
aiorwlock = "1.5.0"
neuro-notifications-client = "25.3.0"
neuro-logging = "25.6.1"
aiohttp-cors = "0.8.1"
asyncpg = "0.30.0"
sqlalchemy = "1.4.54"
alembic = "1.16.5"
psycopg2-binary = "2.9.10"
typing-extensions = "4.15.0"
neuro-admin-client = "25.5.0"
yarl = "1.18.3"
python-jose = ">=3.4.0"
apolo-kube-client = "25.7.4"
apolo-events-client = "25.8.0"
neuro-config-client = "^25.8.7"

[tool.poetry.scripts]
platform-api = "platform_api.api:main"
platform-api-poller = "platform_api.poller_main:main"

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
mypy= "1.17.1"
pre-commit="4.3.0"
aiodocker="0.24.0"
pytest="8.4.1"
pytest-asyncio="1.1.0"
pytest-cov="6.2.1"
pytest-timeout="2.4.0"
pytest-aiohttp="1.1.0"
requests="2.32.5"
ruff = "0.12.12"
pytest-retry = "^1.7.0"
apolo-events-client = {extras = ["pytest"], version = "25.8.0"}

[tool.ruff]
target-version = "py313"

[tool.ruff.lint]
select = [
    "E", "F", "I", "C90", "UP", "B", "ASYNC", "N", "FBT", "A", "C4", "EM", "FA", "ICN",
    "G", "PIE", "PYI", "PT", "RET", "PTH"
]
ignore = [
    "A001",
    "A002",
    "A003",
    "N818",
    "PT006",
    "PT011",
    "EM101",
    "EM102",
    "B008",
    "RET503",
    "PT012",
    "FBT001",
    "FBT002",
    "PT007",
    "ASYNC110",
    "FBT003",
    "PT022", # Disables rule that forces return instead of yield in async fixtures
    "C901",
    "B904"
]

[tool.isort]
profile = "black"
sections = [
    "FUTURE",
    "STDLIB",
    "THIRDPARTY",
    "FIRSTPARTY",
    "TESTS",
    "LOCALFOLDER",
]
known_firstparty = ["platform_api"]
known_tests = ["tests"]
combine_as_imports = true

[tool.ruff.lint.isort]
combine-as-imports = true

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "session"
asyncio_default_test_loop_scope = "session"
testpaths = "tests"
filterwarnings = """
    error
    ignore::DeprecationWarning:.*
    ignore::DeprecationWarning:jose.jwt
    ignore::DeprecationWarning:jose.jws
    ignore:direct construction of Function has been deprecated, please use Function.from_parent:pytest.PytestDeprecationWarning:pytest_asyncio
    ignore::aiohttp.web_exceptions.NotAppKeyWarning
    ignore::ResourceWarning
    ignore:The loop argument is deprecated:DeprecationWarning:
    """

addopts = """
    --cov=platform_api
    --cov-report=term
    --cov-report=xml:coverage/.coverage.xml
    --log-level=DEBUG
    --log-cli=true
    --log-cli-level=INFO
    --log-cli-format="%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
    --log-cli-date-format="%Y-%m-%d %H:%M:%S"
    --timeout=300
"""

[tool.coverage.run]
branch = true
source = ["platform_api"]

[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_untyped_defs = true
follow_imports = "silent"
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = "aiodocker"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "aiodocker.containers"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "aiodocker.utils"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "aiohttp_security"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "aiohttp_security.api"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "aiorwlock"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "asyncssh"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "asyncssh.stream"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "iso8601"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "jose"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "neuro_auth_client"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "neuro_auth_client.client"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "neuro_auth_client.security"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "notifications_client.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pytest"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "setuptools"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "trafaret"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "trafaret.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "_pytest.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "aiohttp_cors"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "asyncpg.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "asyncpgsa"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "alembic.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "sqlalchemy.*"
ignore_missing_imports = true
